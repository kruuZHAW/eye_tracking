syntax = "proto3";

package polaris_fdp_interface.protobuf;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "dateTime.proto";
import "flight.proto";

// Basic message types

// ICAO Aerodrome Designator
message AerodromeDesignator {
  string icao_designator = 1;
}

// Unique Flight Plan Identifier (IFPLID)
message UniqueFlightPlanIdentifier {
  string identifier = 1;
}

// The CoordinationPoint message defines a CoordinationPoint used optionally in REV messages.
message CoordinationPoint {
  string coordination_point = 1;
}

// The DepartureRunway message defines a departure runway used optionally in PAC messages.
message DepartureRunway {
  string departure_runway = 1;
}

// The SidIdentifier message defines a SID identifier used optionally in PAC messages.
message SidIdentifier {
  string sid_identifier = 1;
}

// The Date message defines a google timestamp object used optionally in SAM, SLC and SRM messages
message Date {
  google.protobuf.Timestamp date = 1;
}

// Field Type numbers in ATS messages, as defined in Appendix 2 to PANS-ATM (Doc. 4444).

message FieldType7 {
  tern.protobuf.flight.CallSign aircraft_id = 1;
  tern.protobuf.flight.ModeACode mode_a_code = 2;
}

message FieldType8 {
  tern.protobuf.flight.FlightRuleCategory flight_rule_category = 1;
  tern.protobuf.flight.TypeOfFlight type_of_flight = 2;
}

message FieldType9 {
  // [ a ][ b ]/[c]
  // (a)  Number of aircraft (ONLY in the case of formation flights) - 1 or 2 digits
  //
  // (b)  (b.1) Type of aircraft (2-4 chars) - ICAO Doc 8643, Aircraft Type Designators OR
  //      (b.2) "ZZZZ" if (b.2.1) no designator has been assigned, OR
  //                      (b.2.2) there's more than one type
  //             -> to be shown in Field Type 18:
  //                TYP/ (as specified in ICAO Doc 4444)
  //                  Type(s) of aircraft preceded if necessary without a space by number(s) of aircraft
  //                  and separated by one space if ZZZZ is inserted in Item 9.
  //                  Example:
  //                      –TYP/2F15 5F5 3B2
  //                TYP/ (as specified in IFPS Users Manual)
  //                  The message originator shall […] include the sub-field TYP that shall
  //                  contain details of the aircraft type, preceded by the number of aircraft, as necessary.
  //                  The sub-field shall be denoted by the letters TYP followed by a ‘/’,
  //                  then free text detailing the aircraft type(s) and number of aircraft if necessary
  //                  with a maximum of 60 characters.
  //                  Example:
  //                      -TYP/UNKNOWN or TYP/02 UNKNOWN
  //                      -TYP/2F15 1C135
  //
  // (c)  Wake Turbulence Category (1 letter: L/M/H)
  //
  // Examples:
  //    –DC3/M
  //    –B707/M
  //    –2FK27/M
  //    –ZZZZ/L
  //    –3ZZZZ/L
  //    –B747/H
  //
  //  QUESTION: What about multiple different aircraft types with different WTC ?
  //            Like: "4ZZZZ/H" ??? + Field 18: "TYP/2DC3 2B747"
  //  ANSWER: The behaviour is not specified. Filling the WTC field (9c) in such case is a responsibility of the party
  //          providing a flight plan (originator, agency, IFPS, etc.).
  //          It's still possible to receive a flight plan without WTC when it was not specified in the flight plan
  //          and IFPS wasn't able to assign the most appropriate category. Suggested solution: The system shouldn't
  //          guess anything, but just reject the message and ask for manual correction.

  tern.protobuf.flight.NumberOfAircraft number_of_aircraft = 1;

  // The C++ class tern::flight::AircraftType only handles a single type <= 4 characters,
  // and can store a WakeTurbulenceCategory, too.
  // If "ZZZZ", see also Item 18 TYP/
  tern.protobuf.flight.AircraftTypeAndWakeTurbulenceCategory type_of_aircraft_and_wake_turbulence_category = 2;
}

message FieldType10 {
  tern.protobuf.flight.CommunicationAndNavigationCapabilities communication_and_navigation_capabilities = 1;
  tern.protobuf.flight.SurveillanceCapabilities surveillance_capabilities = 2;
}

message FieldType13 {
  // departure_aerodrome.designator : Aerodrome + Estimated Off-Block Time, eg.: "KLAX1800"
  // departure_aerodrome.item18_departure_information : contains info from Item 18 DEP/
  tern.protobuf.flight.PlannedDepartureAerodrome departure_aerodrome = 1;
}

message FieldType14 {
  string boundary_point = 1;
  tern.protobuf.TimeOfDay time_at_boundary_point = 2;
  tern.protobuf.flight.PlannedCruisingLevel cleared_level = 3;
  tern.protobuf.flight.PlannedCruisingLevel supplementary_crossing_level = 4;
  tern.protobuf.flight.CrossingCondition crossing_condition = 5;
}

message FieldType15 {
  tern.protobuf.flight.PlannedCruisingSpeed cruising_speed = 1;
  tern.protobuf.flight.PlannedCruisingLevel requested_cruising_level = 2;
  repeated tern.protobuf.flight.PlannedRouteElement planned_route_elements = 3;
}

message FieldType16 {
  // destination_aerodrome.code : Aerodrome + Total Estimated Elapsed Time, eg.: "KLAX0430"
  // destination_aerodrome.item18_destination_information : contains info from Item 18 DEST/
  tern.protobuf.flight.PlannedDestinationAerodrome destination_aerodrome = 1;

  // 0, 1 or 2 destination alternate aerodromes
  // PlannedAlternateAerodrome also contains information from Item 18 ALTN/
  repeated tern.protobuf.flight.PlannedAlternateAerodrome destination_alternate_aerodromes = 2;
}

message FieldType17 {
  tern.protobuf.flight.ArrivalAerodrome arrival_aerodrome = 1;
}

message FieldType18 {
  // Subfields of Item 18 stored in other message types:
  //  PBN/  ->  in CommunicationAndNavigationCapabilities::m_performanceBasedNavigationCapabilityCodes
  //  NAV/  ->  in CommunicationAndNavigationCapabilities::m_otherNavigationalCapabilitiesString
  //  COM/  ->  in CommunicationAndNavigationCapabilities::m_otherCommunicationCapabilitiesString
  //  DAT/  ->  in CommunicationAndNavigationCapabilities::m_otherDatalinkCapabilities
  //  SUR/  ->  in SurveillanceCapabilities::m_additionalSurveillanceCapabilities
  //  DEP/  ->  in PlannedDepartureAerodrome::m_item18DepartureInformation
  //  DEST/ ->  in PlannedDestinationAerodrome::m_item18DestinationInformation
  //  ALTN/ ->  in PlannedAlternateAerodrome::m_item18AlternateDestinationInformation

  // Subfields of Item 18 in their own protobuf types:

  // STS/   - Special status.
  tern.protobuf.flight.SpecialStatus special_status = 1;

  // CODE/  - Aircraft address (6 digit hex).
  tern.protobuf.flight.AircraftAddress aircraft_address = 2;

  // REG/   - The nationality or common mark and registration mark of the aircraft [...].
  tern.protobuf.flight.AircraftRegistration aircraft_registration = 3;

  // DOF/   - The date of flight departure in a six-figure format (YYMMDD).
  google.protobuf.Timestamp date_of_flight = 4;

  // EET/   - Significant points or FIR boundary designators and accumulated estimated elapsed times from take-off to
  //          such points [...].
  repeated tern.protobuf.flight.AccumulatedTimeOver eet = 5;

  // SEL/   - SELCAL Code, for aircraft so equipped.
  string selcal_code = 6;

  // TYP/   - Type(s) or aircraft, if ZZZZ is inserted in field no. 9.
  string typ = 7;

  // DLE/   - En-route delay or holding [...].
  repeated tern.protobuf.flight.AccumulatedTimeOver delay = 8;

  // OPR/   - ICAO designator or name of the aircraft operating agency, if different from the aircraft identification
  // in field no. 7.
  string aircraft_operating_agency = 9;

  // ORGN/  - The originator’s eight-letter AFTN address or other appropriate contact details [...].
  string originator = 10;

  // PER/   - Aircraft performance data, indicated by a single letter (PANS-OPS, Doc 8168), Volume I — Flight Procedures.
  string aircraft_performance_data = 11;

  // RALT/  - ICAO four-letter indicator(s) for en-route alternate(s), as specified in Doc 7910 [...].
  string enroute_alternate_aerodromes = 12;

  // TALT/  - ICAO four-letter indicator(s) for take-off alternate, as specified in Doc 7910, [...].
  string takeoff_alternate_aerodrome = 13;

  // RIF/   - The route details to the revised destination aerodrome, followed by the ICAO four-letter location
  //          indicator of the aerodrome.
  string route_elements_to_revised_destination_aerodrome = 14;

  // RMK/   - Any other plain-language remarks.
  string remarks = 15;

  // Additional sub-fields included in ADEXP messages, defined in the IFPS User Manual.

  // EUR/   - EUR/PROTECTED (IFPS Users Manual - Network Manager 25.0).
  string eur = 16;

  // RVR/   - (IFPS Users Manual - Network Manager 25.0).
  tern.protobuf.flight.RunwayVisualRange runway_visual_range = 17;

  // STAYINFOn/ - (IFPS Users Manual - Network Manager 25.0).
  repeated tern.protobuf.flight.StayInfo stay_info = 18;

  // IFP/   - IFP Indicators.
  repeated tern.protobuf.flight.IFPIndicator ifp_indicators = 19;

  // AWR/   - AOWIR - Aircraft Operator What-if Re-Route.
  string awr = 20;

  // SRC/   - Source Indicator.
  string source_indicator = 21;

  // RFP/   - Replacement Flight Plan.
  string replacement_flight_plan = 22;
}

// A generic integer representing a count of something like equipment or people.
message Count {
  fixed32 number = 1;
}

// Supplementary Information - Emergency Radio Equipment (for Field Type 19)
message SupplementaryInformationEmergencyRadioEquipment {
  bool has_emergency_uhf_radio = 1;
  bool has_emergency_vhf_radio = 2;
  bool has_emergency_location_transmitter = 3;
}

// Supplementary Information - Survival Equipment (for Field Type 19)
message SupplementaryInformationSurvivalEquipment {
  bool has_polar_survival_equipment = 1;
  bool has_desert_survival_equipment = 2;
  bool has_maritime_survival_equipment = 3;
  bool has_jungle_survival_equipment = 4;
}

// Supplementary Information - Life Jacket Equipment (for Field Type 19)
message SupplementaryInformationLifeJacketEquipment {
  bool equipped_with_lights = 1;
  bool equipped_with_fluorescein = 2;
  bool equipped_with_uhf_radio = 3;
  bool equipped_with_vhf_radio = 4;
}

// Supplementary Information - Dinghies Equipment (for Field Type 19)
message SupplementaryInformationDinghiesEquipment {
  Count number_of_dinghies = 1;
  Count total_number_of_persons_capacity = 2;
  bool are_dinghies_covered = 3;
  string color_of_dinghies = 4;
}

// Supplementary Information ICAO - Field Type 19.
message FieldType19 {
  tern.protobuf.TimeSpan fuel_endurance = 1;
  oneof number_of_persons_on_board_oneof {
    Count number_of_persons_on_board = 2;
    string number_of_persons_on_board_tbn = 3;
  }
  SupplementaryInformationEmergencyRadioEquipment emergency_radio_equipment = 4;
  SupplementaryInformationSurvivalEquipment survival_equipment = 5;
  SupplementaryInformationLifeJacketEquipment life_jackets = 6;
  SupplementaryInformationDinghiesEquipment dinghies = 7;
  string aircraft_color_and_markings = 8;
  string remarks = 9;
  string name_of_pilot_in_command = 10;
}

// Amendment data - to be used in ICAO Field Type 22.
message AggregatedAmendmentData {
  FieldType7 aircraft_id_mode_a_code = 1;
  FieldType8 flight_rules_type_of_flight = 2;
  FieldType9 num_and_type_of_ac_wake_turbulence_category = 3;
  FieldType10 equipment_and_capabilities = 4;
  FieldType13 departure_aerodrome = 5;
  FieldType14 estimate_data = 6;
  FieldType15 route = 7;
  FieldType16 destination_aerodrome = 8;
  FieldType17 arrival_aerodrome = 9;
  FieldType18 other_information = 10;
  FieldType19 supplementary_information = 11;
}

// The SequenceNumber message defines a message number, used when transmitting ATS messages.
message SequenceNumber {
  uint32 number = 1;
}

message MessageNumber {
  // Defines the sender id, as 1 to 4 letter(s) identifying the sending ATS unit.
  string sender_id = 1;

  // Defines the receiver id, as 1 to 4 letter(s) identifying the receiving ATS unit.
  string receiver_id = 2;

  // Defines a message sequence number, giving the serial number of this message in the sequence
  // of messages transmitted by this unit to the indicated receiving ATS unit.
  SequenceNumber sequence_number = 3;
}

// Duplicates fields from AFTN header used by AIDC protocol.
message AidcAftnMessageHeader {
  // Defines the address of the originator (for incoming messages) or
  // the addressee (for outgoing messages).
  string peer = 1;

  // Defines a message sequence number, giving the serial number of this
  // message in the sequence of messages transmitted by sending ATS unit
  // to the receiving ATS unit. Uses Optional Data Field 2 (ODF2).
  SequenceNumber identification_sequence_number = 2;

  // Defines a message reference information, giving the ICAO location
  // indicator of the immediately preceding message in the dialogue.
  // Encoded in Optional Data Field 3 (ODF3).
  string reference_ats_unit = 3;

  // Defines a message reference information, giving the serial number of
  // the immediately preceding message in the dialogue. Encoded in ODF 3.
  SequenceNumber reference_sequence_number = 4;
}

// Defines the coordination status of a flight plan, that may be included in an OLDI coordination message.
enum OldiCoordinationStatus {
  OldiCoordinationStatus_NOT_SET = 0;

  // When the system flight plan is to be in an initial state, i.e. no notification message received.
  InitialState = 1;

  // When the system flight plan is to be in a notified status.
  NotifiedStatus = 2;
}

// Defines the flight status, that may be included in a CFD message.
enum OldiFlightStatus {
  OldiFlightStatus_NOT_SET = 0;

  // The message represents changes to the flight data(?)
  Change = 1;

  // The message represents deletion of flight data(?)
  Delete = 2;
}

// Defines the reasons for coordination, that may be included in an OLDI coordination message.
enum OldiCoordinationReason {
  OldiCoordinationReason_NOT_SET = 0;

  // If the reason is a change of transfer flight level.
  TransferFlightLevelChanged = 1;

  // If the reason is a change of route.
  RouteChanged = 2;

  // To indicate that the flight is holding for an indefinite period and will be subject to a further message.
  Holding = 3;

  // To indicate that the departure is delayed.
  Delayed = 4;

  // If the reason is a cancellation.
  Cancellation = 5;

  // For any other reason or if the reason is unknown.
  Other = 6;
}

message OldiCoordinationStatusAndReason {
  OldiCoordinationStatus coordination_status = 1;
  OldiCoordinationReason coordination_reason = 2;
}

// Equipment Capability and Status as used in OLDI messages.
message OldiEquipmentCapabilityAndStatus {
  // The equipment which is available for use.
  tern.protobuf.flight.CommunicationAndNavigationCapabilities equipped = 1;

  // The equipment which is not present or cannot be used.
  tern.protobuf.flight.CommunicationAndNavigationCapabilities not_equipped = 2;

  // The compliance with the capability is unknown.
  tern.protobuf.flight.CommunicationAndNavigationCapabilities unknown = 3;
}

// SSR Mode A Code field with a "Request" option, as used in OLDI messages
message OldiModeACodeOrRequest {
  oneof request_or_known_code {
    // Set in the special case when an SSR Mode A code is being requested.
    google.protobuf.Empty request_mode_a_code = 1;

    // Set when the SSR Mode A code is known.
    tern.protobuf.flight.ModeACode mode_a_code = 2;
  }
}

// The RoutePoint message defines a single item of a RTEPTS field as found in ADEXP messages.
message RoutePoint {

  // The Point message corresponds to a PT field in RTEPTS.
  message Point {
    // Point name or coordinate or point name with relative location (Derived from PTID / REF / GEO subfields)
    string point = 1;

    // Flight Level (FL subfield)
    tern.protobuf.flight.PlannedCruisingLevel flight_level = 2;

    // Estimated Time Over (ETO subfield)
    google.protobuf.Timestamp estimated_time_over = 3;
  }

  // The Aerodrome message corresponds to an AD field in RTEPTS.
  message Aerodrome {
    // Aerodrome
    string aerodrome_identifier = 1;

    // Flight Level (FL subfield)
    tern.protobuf.flight.PlannedCruisingLevel flight_level = 2;

    // Estimated Time Over (ETO subfield)
    google.protobuf.Timestamp estimated_time_over = 3;
  }

  // The Vector message corresponds to a VEC field in RTEPTS.
  message Vector {
    // Flight Level (FL subfield)
    tern.protobuf.flight.PlannedCruisingLevel flight_level = 1;

    // Estimated Time Over (ETO subfield)
    google.protobuf.Timestamp estimated_time_over = 2;

    // The percentage of the distance along a route segment between 2 route points. (RELDIST subfield)
    uint32 relative_distance = 3;
  }

  oneof point_oneof {
    Point point = 1;
    Aerodrome aerodrome = 2;
    Vector vector = 3;
  }
}

// The OptionalDataField defines the optional data field (ODF) used along with AIDC (ATS Interfacility
// Data Communications) - conformant to PAN AIDC ICD Version 1.0.
message OptionalDataField {
  // The original representation of ODF, as in AFTN header.
  string original_odf_text = 1;

  // Message identification number.
  SequenceNumber message_identification_number = 2;

  // Reference information - ICAO location indicator.
  string message_reference_ats_unit = 3;

  // Reference information - message identification number.
  SequenceNumber message_reference_identification_number = 4;

  // Time stamp.
  google.protobuf.Timestamp time_stamp = 5;

  // CRC.
  string cyclic_redundancy_check = 6;
}

// The ValidationErrorCode enum identifies the different validation errors.
enum ValidationErrorCode {
  VALIDATION_ERROR_CODE_NOT_SET = 0;
  INTERNAL_TRANSMISSION_ERROR = 101;
  BLACKLISTED_MESSAGE_TYPE = 102;
  INCORRECT_RECIPIENT = 103;
  UNKNOWN_MESSAGE_TYPE = 104;
  FAILED_TO_GENERATE_OUTGOING_MESSAGE = 105;
  EXTERNAL_TRANSMISSION_ERROR = 106;
  EXTERNAL_TRANSMISSION_DISPATCHING_ERROR = 107;
  MESSAGE_DISCARDED = 108;
  UNKNOWN_SENDER = 109;
  INVALID_MESSAGE_SEQUENCE_NUMBER = 110;
  INVALID_MESSAGE_FORMAT = 201;
  INVALID_MESSAGE_DATA = 202;
  MESSAGE_SYNTAX_ERROR = 203;
  AMBIGUOUS_SFR_ASSOCIATION = 301;
  UNSUCCESSFUL_SFR_ASSOCIATION = 302;
  UNSUCCESSFUL_SFR_ASSOCIATION_IGNORED = 303;
  MESSAGE_FIELD_VALUES_CONFLICT_WITH_AIRCRAFT_TYPE = 401;
  UNKNOWN_AIRCRAFT_TYPE = 402;
  MESSAGE_TYPE_CONFLICTS_WITH_CURRENT_SFR_INCOMING_COORDINATION_STATE = 403;
  MESSAGE_TYPE_CONFLICTS_WITH_CURRENT_SFR_OUTGOING_COORDINATION_STATE = 404;
  MESSAGE_TYPE_CONFLICTS_WITH_CURRENT_SFR_LIFECYCLE_STATE = 405;
  MESSAGE_TYPE_CONFLICTS_WITH_CURRENT_POSITION_OF_SFR = 406;
  REQUIRED_FIELD_NOT_PRESENT = 407;
  INVALID_FIELD_VALUE = 408;
  SEMANTIC_VALIDATION_FAILURE = 409;
  SEMANTIC_VALIDATION_FAILURE_IGNORED = 410;
  MESSAGE_TYPE_CONFLICTS_WITH_SFR_CONTROL_STATE = 411;
}

// Defines the  validation error types that can occur during the validation of the message.
enum ValidationErrorType
{
  VALIDATION_ERROR_TYPE_NOT_SET = 0;
  UNKNOWN_TYPE = 1;
  BLACKLISTED_TYPE = 2;
  SYNTAX_ERROR = 3;
  ASSOCIATION_ERROR = 4;
  ASSOCIATION_ERROR_IGNORED = 5;
  SEMANTIC_ERROR = 6;
  SEMANTIC_WARNING = 7;
  SEMANTIC_WARNING_IGNORED = 8;
  TRANSMISSION_ERROR = 9;
  OTHER_ERROR = 10;
}