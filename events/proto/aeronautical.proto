syntax = "proto3";

import "configuration-editor-options.proto";
import "uuid.proto";
import "math.proto";
import "geometry.proto";

package tern.protobuf.aeronautical;

// Vertical unit of measurement
enum VerticalUoM {
  VERTICAL_UOM_NOT_SET = 0;
  VERTICAL_UOM_FEET = 1;
  VERTICAL_UOM_METERS = 2;
  VERTICAL_UOM_FLIGHT_LEVEL = 3;
  VERTICAL_UOM_STANDARD_METERS = 4;
}

// Vertical reference
enum VerticalReference {
  VERTICAL_REFERENCE_NOT_SET = 0;
  VERTICAL_REFERENCE_SURFACE = 1;
  VERTICAL_REFERENCE_MEAN_SEA_LEVEL = 2;
  VERTICAL_REFERENCE_WGS84 = 3;
  VERTICAL_REFERENCE_STANDARD_ATMOSPHERE = 4;
}

// Message representing a vertical type
message VerticalType {
  string value = 1 [(label) = "Value"];
  VerticalUoM unit_of_measurement = 2 [(label) = "Vertical unit of measurement"];
  VerticalReference reference = 3 [(label) = "Vertical reference"];
}

// The AirportHeliportType message defines the protobuf representation for tern::aeronautical::AirportHeliport::AirportType.
enum AirportHeliportType {
  AIRPORT_HELIPORT_TYPE_NOT_SET = 0;
  AIRPORT_HELIPORT_TYPE_AERODROME_ONLY = 1;
  AIRPORT_HELIPORT_TYPE_AERODROME_WITH_HELIPORT = 2;
  AIRPORT_HELIPORT_TYPE_HELIPORT_ONLY = 3;
  AIRPORT_HELIPORT_TYPE_LANDING_SITE = 4;
  AIRPORT_HELIPORT_TYPE_OTHER = 5;
};

// The AirportHeliport message defines the protobuf representation for tern::aeronautical::AirportHeliport.
message AirportHeliport {
  option (excludeFromTree) = true;
  tern.protobuf.Uuid uuid = 1 [(isUuid) = true];
  // Defines an designator for the airport/heliport.
  string designator = 2 [(label) = "ICAO designator", (isRepeatedMessageName) = true, (inReferenceKey) = true];
  // Defines the full name for the airport/heliport.
  string name = 3 [(label) = "Full name"];
  // Defines the airport/heliport type.
  AirportHeliportType type = 4 [(label) = "Airport/heliport type"];
  // Defines the field elevation above Mean Sea Level (MSL) for the airport/heliport
  tern.protobuf.math.geometry.Altitude field_elevation = 5 [(label) = "Field elevation", (unit) = "m",
    (additionalInfo) = "The field elevation above Mean Sea Level (MSL) of the airport/heliport."];
  // Defines the position of the airport/heliport.
  tern.protobuf.math.LatLon position = 6 [(label) = "Position"];
}

// The NavaidType message defines the protobuf representation for tern::aeronautical::Navaid::NavaidServiceType.
enum NavaidType {
  NAVAID_TYPE_NOT_SET = 0;
  NAVAID_TYPE_DIRECTION_FINDER = 1;
  NAVAID_TYPE_DISTANCE_MEASURING_EQUIPMENT = 2;
  NAVAID_TYPE_INSTRUMENT_LANDING_SYSTEM = 3;
  NAVAID_TYPE_INSTRUMENT_LANDING_SYSTEM_WITH_DISTANCE_MEASURING_EQUIPMENT = 4;
  NAVAID_TYPE_LOCALIZER = 5;
  NAVAID_TYPE_LOCALIZER_WITH_DISTANCE_MEASURING_EQUIPMENT = 6;
  NAVAID_TYPE_MARKER_BEACON = 7;
  NAVAID_TYPE_MICROWAVE_LANDING_SYSTEM = 8;
  NAVAID_TYPE_MICROWAVE_LANDING_SYSTEM_WITH_DISTANCE_MEASURING_EQUIPMENT = 9;
  NAVAID_TYPE_NON_DIRECTIONAL_RADIO_BEACON = 10;
  NAVAID_TYPE_NON_DIRECTIONAL_RADIO_BEACON_WITH_DISTANCE_MEASURING_EQUIPMENT = 11;
  NAVAID_TYPE_NON_DIRECTIONAL_RADIO_BEACON_AND_MARKER_BEACON = 12;
  NAVAID_TYPE_SIMPLIFIED_DIRECTIONAL_FACILITY = 13;
  NAVAID_TYPE_TACTICAL_AIR_NAVIGATION_BEACON = 14;
  NAVAID_TYPE_TRANSPONDER_LANDING_SYSTEM = 15;
  NAVAID_TYPE_VHF_OMNIDIRECTIONAL_RADIO_RANGE = 16;
  NAVAID_TYPE_VHF_OMNIDIRECTIONAL_RADIO_RANGE_AND_VHF_OMNIDIRECTIONAL_RADIO_RANGE = 17;
  NAVAID_TYPE_VORTAC = 18;
  NAVAID_TYPE_OTHER = 19;
}

// The Navaid message defines the protobuf representation for tern::aeronautical::Navaid.
message Navaid {
  option (excludeFromTree) = true;
  tern.protobuf.Uuid uuid = 1 [(isUuid) = true];
  // Defines an designator for the navaid.
  string designator = 2 [(label) = "ICAO designator", (isRepeatedMessageName) = true];
  // Defines the full name for the navaid.
  string name = 3 [(label) = "Full name",  (inReferenceKey) = true];
  // Defines the Navaid type.
  NavaidType type = 4 [(label) = "Navaid type"];
  // Defines the country code for the navaid.
  string country = 5 [(label) = "Country code", (inReferenceKey) = true];
  // Defines the position of the navaid.
  tern.protobuf.math.LatLon position = 6 [(label) = "Position"];
}

// The DesignatedPointType message defines the protobuf representation for tern::aeronautical::DesignatedPoint::DesignatedPointType.
enum DesignatedPointType {
  DESIGNATED_POINT_TYPE_NOT_SET = 0;
  DESIGNATED_POINT_TYPE_BEARING_DISTANCE_REFERENCE_WAYPOINT = 1;
  DESIGNATED_POINT_TYPE_COMPUTER_NAVIGATION_FIX = 2;
  DESIGNATED_POINT_TYPE_GEOGRAPHICAL_COORDINATE = 3;
  DESIGNATED_POINT_TYPE_USED_FOR_PROCEDURE_DESIGN = 4;
  DESIGNATED_POINT_TYPE_ICAO_DESIGNATOR = 5;
  DESIGNATED_POINT_TYPE_MILITARY_TRAINING_ROUTE = 6;
  DESIGNATED_POINT_TYPE_WAYPOINT_FOR_RNAV_PROCEDURES = 7;
  DESIGNATED_POINT_TYPE_OTHER = 8;
}

// The DesignatedPoint message defines the protobuf representation for tern::aeronautical::DesignatedPoint.
message DesignatedPoint {
  option (excludeFromTree) = true;
  tern.protobuf.Uuid uuid = 1 [(isUuid) = true];
  // Defines an ICAO designator for the designated point.
  string designator = 2 [(label) = "ICAO designator", (isRepeatedMessageName) = true, (inReferenceKey) = true];
  // Defines the full name for the designated point.
  string name = 3 [(label) = "Full name"];
  // Defines the designated point type.
  DesignatedPointType type = 4 [(label) = "Designated point type"];
  // Defines the country code for the designated point.
  string country = 5 [(label) = "Country code"];
  // Defines the position of the designated point.
  tern.protobuf.math.LatLon position = 6 [(label) = "Position"];
}

// The SignificantPoint message defines the protobuf representation for tern::aeronautical::SignificantPoint.
message SignificantPoint {
  option (excludeFromTree) = true;
  oneof significant_point_data {
    option (oneofLabel) = "Significant point";
    AirportHeliport airport_heliport = 1 [(label) = "Airport/heliport"];
    Navaid navaid = 2 [(label) = "Navaid"];
    DesignatedPoint designated_point = 3 [(label) = "Designated point"];
  }
}

// The PathTerminator message defines the protobuf representation for tern::aeronautical::leg::Leg::PathTerminator.
enum PathTerminator {
  PATH_TERMINATOR_NOT_SET = 0;
  PATH_TERMINATOR_ARC_TO_FIX = 1;
  PATH_TERMINATOR_COURSE_TO_ALTITUDE = 2;
  PATH_TERMINATOR_COURSE_TO_DME_DISTANCE = 3;
  PATH_TERMINATOR_COURSE_TO_FIX = 4;
  PATH_TERMINATOR_COURSE_TO_INTERCEPT = 5;
  PATH_TERMINATOR_COURSE_TO_RADIAL = 6;
  PATH_TERMINATOR_CONSTANT_RADIUS_ARC = 7;
  PATH_TERMINATOR_DIRECT_TO_FIX = 8;
  PATH_TERMINATOR_FIX_TO_ALTITUDE = 9;
  PATH_TERMINATOR_FIX_TO_DISTANCE = 10;
  PATH_TERMINATOR_FIX_TO_DME_DISTANCE = 11;
  PATH_TERMINATOR_FIX_TO_MANUAL_TERMINATION = 12;
  PATH_TERMINATOR_HEADING_TO_ALTITUDE = 13;
  PATH_TERMINATOR_HEADING_TO_DME_DISTANCE = 14;
  PATH_TERMINATOR_HEADING_TO_INTERCEPT = 15;
  PATH_TERMINATOR_HEADING_TO_MANUAL_TERMINATION = 16;
  PATH_TERMINATOR_HEADING_TO_RADIAL = 17;
  PATH_TERMINATOR_INITIAL_FIX = 18;
  PATH_TERMINATOR_PROCEDURE_TURN = 19;
  PATH_TERMINATOR_RACETRACK_TO_ALTITUDE = 20;
  PATH_TERMINATOR_RACETRACK_TO_MANUAL_TERMINATION = 21;
  PATH_TERMINATOR_RACETRACK_TO_FIX = 22;
  PATH_TERMINATOR_TRACK_TO_FIX = 23;
}

// The LegTurnDirection message defines the protobuf representation for tern::aeronautical::leg::Leg::TurnDirection.
enum LegTurnDirection {
  LEG_TURN_DIRECTION_NOT_SET = 0;
  LEG_TURN_DIRECTION_NO_TURN = 1;
  LEG_TURN_DIRECTION_LEFT = 2;
  LEG_TURN_DIRECTION_RIGHT = 3;
}

// The WaypointTransitionType message defines the protobuf representation for tern::aeronautical::leg::Waypoint::WaypointTransitionType.
enum WaypointTransitionType {
  WAYPOINT_TRANSITION_TYPE_NOT_SET = 0;
  WAYPOINT_TRANSITION_TYPE_FLYBY = 1;
  WAYPOINT_TRANSITION_TYPE_FLYOVER = 2;
  WAYPOINT_TRANSITION_TYPE_FIXED_RADIUS = 3;
}

// The Waypoint message defines the protobuf representation for tern::aeronautical::leg::Waypoint.
message Waypoint {
  option (excludeFromTree) = true;
  WaypointTransitionType transition_type = 1 [(label) = "Transition Type"];
  SignificantPoint point = 2 [(label) = "Significant point"];
  bool report_required = 3 [(label) = "Report required"];
}

// The DirectToFix message defines the protobuf representation for tern::aeronautical::leg::DirectToFix.
message DirectToFix {
  option (excludeFromTree) = true;
  Waypoint waypoint_reference = 1 [(label) = "Waypoint of this leg" ];
}

// The TrackToFix message defines the protobuf representation for tern::aeronautical::leg::TrackToFix.
message TrackToFix {
  option (excludeFromTree) = true;
  Waypoint from_point_reference = 1 [(label) = "From point"];
  Waypoint to_point_reference = 2 [(label) = "To point"];
}

// The InitialFix message defines the protobuf representation for tern::aeronautical::leg::InitialFix.
message InitialFix {
  option (excludeFromTree) = true;
  Waypoint waypoint_reference = 1 [(label) = "Waypoint of this leg" ];
}

// The LegVariant message defines the protobuf representation for tern::aeronautical::leg::LegVariant.
message LegVariant {
  oneof variant {
    option (oneofLabel) = "Leg Variants";
    DirectToFix direct_to_fix = 1 [(label) = "Direct to fix"];
    TrackToFix track_to_fix = 2 [(label) = "Track to fix"];
    InitialFix initial_fix = 3 [(label) = "Initial fix"];
  }
}

// The SpeedRestrictionType message defines the protobuf representation for tern::aeronautical::leg::SpeedRestriction::SpeedRestrictionType.
enum SpeedRestrictionType {
  SPEED_RESTRICTION_TYPE_NOT_SET = 0;
  SPEED_RESTRICTION_TYPE_MAX = 1;
  SPEED_RESTRICTION_TYPE_MIN = 2;
  SPEED_RESTRICTION_TYPE_TARGET = 3;
}

// The SpeedRestriction message defines the protobuf representation for tern::aeronautical::leg::SpeedRestriction.
message SpeedRestriction {
  SpeedRestrictionType type = 1 [(label) = "Speed restriction type"];
  tern.protobuf.math.SpeedVariant limit = 2 [(label) = "Speed limit"];
}

// The VerticalRestrictionType message defines the protobuf representation for tern::aeronautical::leg::VerticalRestriction::VerticalRestrictionType.
enum VerticalRestrictionType {
  VERTICAL_RESTRICTION_TYPE_NOT_SET = 0;
  VERTICAL_RESTRICTION_TYPE_AT = 1;
  VERTICAL_RESTRICTION_TYPE_AT_OR_ABOVE = 2;
  VERTICAL_RESTRICTION_TYPE_AT_OR_BELOW = 3;
  VERTICAL_RESTRICTION_TYPE_BETWEEN = 4;
}

// The VerticalRestriction message defines the protobuf representation for tern::aeronautical::leg::VerticalRestriction.
message VerticalRestriction {
  tern.protobuf.math.geometry.VerticalVariant lower_limit = 1 [(label) = "Lower limit"];
  tern.protobuf.math.geometry.VerticalVariant upper_limit = 2 [(label) = "Upper limit"];
  VerticalRestrictionType type = 3 [(label) = "Vertical restriction type"];
}

// The Leg message defines the protobuf representation for tern::aeronautical::leg::Leg.
message Leg {
  option (excludeFromTree) = true;
  PathTerminator path_terminator = 1 [(label) = "Path terminator"];
  LegTurnDirection turn_direction = 2 [(label) = "Turn direction"];
  LegVariant leg_variant = 3 [(label) = "Leg variant"];
  tern.protobuf.math.Distance distance = 4 [(label) = "Distance"];
  tern.protobuf.math.geometry.Angle heading = 5 [(label) = "Heading"];
  SpeedRestriction speed_restriction = 6 [(label) = "Speed restriction"];
  VerticalRestriction vertical_restriction = 7 [(label) = "Vertical restriction"];
  string caution = 8 [(label) = "Caution"];
}
