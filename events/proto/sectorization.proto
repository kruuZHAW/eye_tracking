syntax = "proto3";
package tern.protobuf;

import "aeronautical.proto";

// AlertsStatus message represents the alert status for SNS volumes for a given control sector.
message AlertsStatus {
    // Status of the alerts
    enum AlertStatus {
        NOT_SET = 0;
        ON = 1;
        OFF = 2;
    }
    AlertStatus stca_alert_status = 1;
    AlertStatus clam_alert_status = 2;
    AlertStatus apw_alert_status = 3;
    AlertStatus ram_alert_status = 4;
    AlertStatus dsam_alert_status = 5;
    AlertStatus aiw_alert_status = 6;
}

// ControlSector message represents the Control Sector properties.
// E.g. the given control sector name, list of sector names and alert status.
message ControlSector {
    // Name of the Control Sector
    string name = 1;
    // List of the sector names which compose the control sector
    // Each sector name is defined in the aeronautical data (i.e. AIXM).
    // The aeronautical data contains frequencies and control type which will be used by the EDS
    repeated string sector_names = 2;
    // Alert status settings to be used at CWP where the control sector will be assigned
    AlertsStatus alertsStatus = 3;
}

// Sectorization profile type to identify ACC vs APP sectorizations
enum SectorizationProfileType {
    SECTORIZATION_PROFILE_TYPE_NOT_SET = 0;
    SECTORIZATION_PROFILE_TYPE_ACC = 1;
    SECTORIZATION_PROFILE_TYPE_APP = 2;
    SECTORIZATION_PROFILE_TYPE_FIC = 3;
    SECTORIZATION_PROFILE_TYPE_MAN = 4; // Added for management roles 
}

// Message representing the sectorization profile
// The SectorizationProfile message represents the information needed to define a sectorization.
// E.g. the assigned name of the sectorization profile, a list of ControlSectors and type.
message SectorizationProfile {
    // Name of the sectorization profile
    string name = 1;
    // List of the control sectors
    repeated ControlSector list_of_control_sectors = 2;
    // Type of Sectorization Profile. E.g. ACC or APP
    SectorizationProfileType sectorization_profile_type = 3;
}

// Status of an alert
enum AlertStatus {
    ALERT_STATUS_NOT_SET = 0;
    ALERT_STATUS_ON = 1;
    ALERT_STATUS_OFF = 2;
}

// Defines the types of Safety Nets.
enum SafetyNetType {
    SAFETY_NET_TYPE_NOT_SET = 0;
    SAFETY_NET_TYPE_STCA = 1;
    SAFETY_NET_TYPE_APW = 2;
    SAFETY_NET_TYPE_CLAM = 3;
    SAFETY_NET_TYPE_AIW = 4;
    SAFETY_NET_TYPE_RAM = 5;
    SAFETY_NET_TYPE_DSAM = 6;
}

// Status of a safety net
message SafetyNetAlertStatus {
    SafetyNetType safety_net_type = 1;
    AlertStatus alert_status = 2;
}

// SectorVolume message describes the
message SectorUnit {
    string uuid = 1;
    // Name of the sector unit. E.g. WL (west low). Not mandatory
    string name = 2;
    // Geometrical shape comes from AIXM. Mandatory
    string airspace_designator_reference = 3;
    // NB: There is a VerticalLimits message in eds-interface which could be re-used here.
    // Upper vertical limit. Mandatory
    tern.protobuf.aeronautical.VerticalType upper_vertical_limit = 4;
    // Lower vertical limit. Mandatory
    tern.protobuf.aeronautical.VerticalType lower_vertical_limit = 5;
    // Frequencies. Mandatory
    repeated string frequencies = 6;
}

// Control Sector
// NB: ControlSector is already taken so needs to be called differently
message ControllerSector {
    // Control Sector Name
    string name = 1;
    // List of Sector Units which compose the sector
    repeated string sector_unit_uuids = 2;
    // Frequency of the control sector
    string frequency = 3 [deprecated = true];
    // Selected frequency of the control sector
    string selected_frequency = 4;
    // List of all frequencies possible for the control sector including the selected frequency.
    repeated string frequencies = 5;
}

// Role of a CWP
enum CwpRole {
    CWP_ROLE_NOT_SET = 0;
    // Primary (Executive) controller
    CWP_ROLE_EC = 1;
    // Secondary (Planner) controller
    CWP_ROLE_PC = 2;
    // Flight Data Operator
    CWP_ROLE_FDO = 3;
    // Supervisor
    CWP_ROLE_SV = 4;
    // Technical Supervisor
    CWP_ROLE_TSV = 5;
}

// This message represents the association between a CWP and sectors.
message SectorAllocation {
    // CWP name at which the control sector are assigned to
    string cwp_name = 1;
    // CWP Role
    CwpRole cwp_role = 2;
    // Control Sector by name
    // CWPs who have EC role must have only one sector assigned
    // CWPs who have PC role can have more than one sector assigned
    repeated string control_sector_names = 3;
    // Alert status settings to be used at CWP
    repeated SafetyNetAlertStatus safety_net_alert_statuses = 4;
    //Allocated frequencies to the CWP
    repeated string allocated_frequencies = 5;
}

// The new sectorization profile message
message TheSectorizationProfile {
    // Name of the sectorization profile, Mandatory
    string name = 1;
    // Type of Sectorization Profile. E.g. ACC, APP or FIC, Mandatory
    SectorizationProfileType sectorization_profile_type = 2;
    // The definition of the sector units to be used by the control sectors
    repeated SectorUnit sector_units = 3;
    // List of the control sectors, Mandatory
    repeated ControllerSector list_of_control_sectors = 4;
    // Allocation of the control sectors to CWPs
    // Map the different ControlSectors against CWPs
    // Should we have two repeated fields? One for EC roles and one for PC roles? The EC will be validated that all sectors are assigned to a CWP.
    repeated SectorAllocation list_of_allocated_control_sectors = 5;
}

// Defines a unit to construct the Areo of Responsibility.
message AreaOfResponsibilityUnit {
    string name = 1;
    // The sectorization profile type of the unit.
    SectorizationProfileType sectorization_profile_type = 2;
    // The list of Sector Units that construct the AoR unit.
    repeated SectorUnit sector_units = 3;
}

// Defines an Area of Responsibility.
message AreaOfResponsibility {
    // The ICAO name of the AoR.
    string icao_name = 1;
    // The units that construct the AoR.
    repeated AreaOfResponsibilityUnit units = 2;
}
