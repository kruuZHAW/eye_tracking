syntax = "proto3";

package polaris_fdp_interface.protobuf;

// Available Fmtp Message Types
enum FmtpMessageType {
  OperationalMessage = 0;
  OperatorMessage = 1;
  IdentificationMessage = 2;
  SystemMessage = 3;
}

// OperationalPayload messages are linked to a specific operational context and are defined in the
// Eurocontrol Standards and Documents that make use of this Standard for data interchange.
// Eurocontrol Standard Document for On-Line Data Interchange defines operational messages such as
// Activation (ACT), Advanced Boundary Information (ABI), Logical Acknowledgement (LAM) and MAC messages.
message OperationalPayload {
  string data = 1;
}

// OperatorPayload messages contain free text. Their use is to be bilaterally agreed. For example,
// they may be used to exchange test information or to inform the other side about operator actions.
message OperatorPayload {
  string message = 1;
}

// Available Identification Payload Types
enum IdentificationPayloadType {
  Accept = 0;
  Reject = 1;
  Identification = 2;
  Unknown = 3;
}

// IdentificationPayload is used to exchange identification values and the result of their
// validation (ACCEPT and REJECT messages).
message IdentificationPayload {
  IdentificationPayloadType type = 1;
  string localId = 2;
  string remoteId = 3;
}

// Available System Payload Types
enum SystemPayloadType {
  Startup = 0;
  Shutdown = 1;
  Heartbeat = 2;
}
// SystemPayload messages shall be used for link monitoring (HEARTBEAT message) and application
// control (STARTUP and SHUTDOWN messages).
message SystemPayload {
  SystemPayloadType type = 1;
}

// The FmtpMessage is used, in a peer-to-peer communications context, for the information exchanges between
// flight data processing systems for the purpose of notification, co-ordination and transfer of flights
// between air traffic control units and for the purposes of civil-military co-ordination.
message FmtpMessage {
  FmtpMessageType messageType = 1;
  fixed32 version = 2;
  oneof payload {
    OperationalPayload operationalPayload = 5;
    OperatorPayload operatorPayload = 6;
    IdentificationPayload identificationPayload = 7;
    SystemPayload systemPayload = 8;
  }
}

