syntax = "proto3";

package polaris_fdp_interface.protobuf;

import "google/protobuf/timestamp.proto";
import "flight.proto";
import "uuid.proto";
import "polaris_fdp_aftn_message.proto";
import "polaris_fdp_flight_message_fields.proto";
import "dateTime.proto";

// Messages defined in PANS-ATM (Doc. 4444) and IFPS Users Manual

// ATC Flight Plan Change message.
message AchMessage {
  // Unique Flight Plan Identifier - ADEXP 'IFPLID' field.
  UniqueFlightPlanIdentifier unique_flight_plan_id = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 3;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 4;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 5;

  // Amendments ICAO - Field type 22.
  AggregatedAmendmentData amendments = 6;
}

// Acceptance message.
message AcpMessage {
  // Message identification and reference information from AFTN header.
  AidcAftnMessageHeader aftn_header = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 3;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 4;
}

// ATC Flight Plan Proposal message.
message AfpMessage {
  // Unique Flight Plan Identifier - ADEXP 'IFPLID' field.
  UniqueFlightPlanIdentifier unique_flight_plan_id = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2;

  // Flight Rule Category and Type of Flight, ICAO - Field type 8.
  FieldType8 flight_rules_type_of_flight = 3;

  // Number and Type of Aircraft, Wake Turbulence Category ICAO - Field type 9.
  FieldType9 num_and_type_of_ac_wake_turbulence_category = 4;

  // Equipment Capability ICAO - Field type 10.
  FieldType10 equipment_and_capabilities = 5;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 6;

  // Estimate Data ICAO - Field type 14.
  FieldType14 estimate_data = 7;

  // Cruising Level, Cruising Speed and Route ICAO - Field type 15.
  FieldType15 route = 8;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 9;

  // Old Destination Aerodrome - ADEXP 'ADESOLD' field.
  AerodromeDesignator old_destination_aerodrome = 10;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 11;
}

// ATC Flight Plan message.
message AplMessage {
  // Unique Flight Plan Identifier - ADEXP 'IFPLID' field.
  UniqueFlightPlanIdentifier unique_flight_plan_id = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2;

  // Flight Rule Category and Type of Flight, ICAO - Field type 8.
  FieldType8 flight_rules_type_of_flight = 3;

  // Number and Type of Aircraft, Wake Turbulence Category ICAO - Field type 9.
  FieldType9 num_and_type_of_ac_wake_turbulence_category = 4;

  // Equipment Capability ICAO - Field type 10.
  FieldType10 equipment_and_capabilities = 5;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 6;

  // Estimate Data ICAO - Field type 14.
  FieldType14 estimate_data = 7;

  // Cruising Level, Cruising Speed and Route ICAO - Field type 15.
  FieldType15 route = 8;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 9;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 10;
}

// Arrival message.
message ArrMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Arrival Aerodrome ICAO - Field type 17.
  FieldType17 arrival_aerodrome = 4;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 5;
}

// Modification message.
message ChgMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 4;

  // Amendments ICAO - Field type 22.
  AggregatedAmendmentData amendments = 5;
}

// Flight Plan Cancellation message.
message CnlMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 4;
}

// Current Flight Plan message.
message CplMessage {
  // Message identification from AFTN header.
  AidcAftnMessageHeader aftn_header = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2;

  // Flight Rule Category and Type of Flight, ICAO - Field type 8.
  FieldType8 flight_rules_type_of_flight = 3;

  // Number and Type of Aircraft, Wake Turbulence Category ICAO - Field type 9.
  FieldType9 num_and_type_of_ac_wake_turbulence_category = 4;

  // Equipment Capability ICAO - Field type 10.
  FieldType10 equipment_and_capabilities = 5;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 6;

  // Estimate Data ICAO - Field type 14.
  FieldType14 estimate_data = 7;

  // Cruising Level, Cruising Speed and Route ICAO - Field type 15.
  FieldType15 route = 8;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 9;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 10;
}

// Departure message.
message DepMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 4;
}

// Delay message.
message DlaMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 4;
}

// Filed Flight Plan message.
message FplMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Flight Rule Category and Type of Flight, ICAO - Field type 8.
  FieldType8 flight_rules_type_of_flight = 2;

  // Number and Type of Aircraft, Wake Turbulence Category ICAO - Field type 9.
  FieldType9 num_and_type_of_ac_wake_turbulence_category = 3;

  // Equipment Capability ICAO - Field type 10.
  FieldType10 equipment_and_capabilities = 4;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 5;

  // Cruising Level, Cruising Speed and Route ICAO - Field type 15.
  FieldType15 route = 6;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 7;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 8;

  // Supplementary Information ICAO - Field type 19.
  FieldType19 supplementary_information = 9;
}

// Request Flight Plan message.
message RqpMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 4;
}

// Request Supplementary Flight Plan message.
message RqsMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 4;
}

// Slot Allocation Message
message SamMessage {

  // Unique Flight Plan Identifier - ADEXP 'IFPLID' field.
  UniqueFlightPlanIdentifier unique_flight_plan_id = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 3;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 4;

  // Estimated off-block date.
  Date estimated_off_block_date = 5;

  // Calculated take off time.
  tern.protobuf.TimeOfDay calculated_take_off_time = 6;
}

// Slot Requirement Cancellation Message
message SlcMessage {

  // Unique Flight Plan Identifier - ADEXP 'IFPLID' field.
  UniqueFlightPlanIdentifier unique_flight_plan_id = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2 ;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 3;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 4;

  // Estimated off-block date.
  Date estimated_off_block_date = 5;
}


// Supplementary Flight Plan message.
message SplMessage {
  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information = 4;

  // Supplementary Information ICAO - Field type 19.
  FieldType19 supplementary_information = 5;
}

// Slot Revisision Message
message SrmMessage {
  // Unique Flight Plan Identifier - ADEXP 'IFPLID' field.
  UniqueFlightPlanIdentifier unique_flight_plan_id = 1;

  // Aircraft ID and Mode-A Code ICAO - Field type 7.
  FieldType7 aircraft_id_mode_a_code = 2;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 3;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 4;

  // Estimated off-block date.
  Date estimated_off_block_date = 5;

  // Calculated take off time.
  tern.protobuf.TimeOfDay calculated_take_off_time = 6;
}

// Messages defined in Pan Regional (NAT and APAC) Interface Control Document for ATS Interfacility Data Communications (PAN AIDC ICD).

// Logical Acknowledgement Message.
message LamMessage {
  // Message identification and reference information from AFTN header.
  AidcAftnMessageHeader aftn_header = 1;
}

// Logical Rejection Message.
message LrmMessage {
  // Message identification and reference information from AFTN header.
  AidcAftnMessageHeader aftn_header = 1;

  // Other Information ICAO - Field type 18.
  FieldType18 other_information_rmk = 2;
}

// Messages defined in EUROCONTROL Specification for On-Line Data Interchange (OLDI)

message OldiMessage {

  // Defines an Advance Boundary Information message.
  message AbiMessage {
    // Message Number ICAO - Field type 3b.
    MessageNumber message_number = 1;

    // Aircraft Identification ICAO - Field type 7a.
    tern.protobuf.flight.CallSign aircraft_identification = 2;

    // SSR Mode and Code (if available) ICAO - Field type 7b and c.
    tern.protobuf.flight.ModeACode ssr_mode_and_code = 3;

    // Departure Aerodrome ICAO - Field type 13.
    FieldType13 departure_aerodrome = 4;

    // Estimate data ICAO - Field type 14.
    FieldType14 estimate_data = 5;

    // Destination Aerodrome ICAO - Field type 16.
    FieldType16 destination_aerodrome = 6;

    // Flight Rule Category and Type of Flight, ICAO - Field type 8.
    FieldType8 flight_rules_and_type_of_flight = 7;

    // Equipment Capability and Status, the equipment which is available for use - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_equipped = 8;

    // Equipment Capability and Status, the equipment which is not present or cannot be used - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_not_equipped = 9;

    // Equipment Capability and Status, when the compliance with the capability is unknown - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_unknown = 10;

    // Number and Type of Aircraft - Field type 9 in field 22 format.
    FieldType9 number_and_type_of_aircraft = 11;

    // Route - Field type 15.
    FieldType15 route = 12;

    // Other Flight Plan Data - Field type 8a Flight Rules in field type22 - One or more of the following
    // field type 18 elements in field type 22 format: REG, OPR, STS, TYP, PER, DEP, DEST, ALTN, RALT, RMK.
    FieldType18 other_flight_plan_data = 13;

    // Equipment Capability ICAO - Field type 10. Provided, in some cases, in ADEXP messages.
    FieldType10 equipment_and_capabilities = 14;
  }

  // Defines an Activation message.
  message ActMessage {
    // Message Number ICAO - Field type 3b.
    MessageNumber message_number = 1;

    // Aircraft Identification ICAO - Field type 7a.
    tern.protobuf.flight.CallSign aircraft_identification = 2;

    // SSR Mode and Code (if available) ICAO - Field type 7b and c.
    tern.protobuf.flight.ModeACode ssr_mode_and_code = 3;

    // Departure Aerodrome ICAO - Field type 13.
    FieldType13 departure_aerodrome = 4;

    // Estimate data ICAO - Field type 14.
    FieldType14 estimate_data = 5;

    // Destination Aerodrome ICAO - Field type 16.
    FieldType16 destination_aerodrome = 6;

    // Number and Type of Aircraft - Field type 9 in field 22 format.
    FieldType9 number_and_type_of_aircraft = 7;

    // Flight Rule Category and Type of Flight, ICAO - Field type 8.
    FieldType8 flight_rules_and_type_of_flight = 8;

    // Equipment Capability and Status, the equipment which is available for use - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_equipped = 9;

    // Equipment Capability and Status, the equipment which is not present or cannot be used - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_not_equipped = 10;

    // Equipment Capability and Status, when the compliance with the capability is unknown - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_unknown = 11;

    // Route - Field type 15.
    FieldType15 route = 12;

    // Other Flight Plan Data - Field type 8a Flight Rules in field type22 - One or more of the following
    // field type 18 elements in field type 22 format: REG, OPR, STS, TYP, PER, DEP, DEST, ALTN, RALT, RMK.
    FieldType18 other_flight_plan_data = 13;

    // Actual Take-Off Time (ADEXP only).
    google.protobuf.Timestamp actual_take_off_Time = 14;

    // Equipment Capability ICAO - Field type 10. Provided, in some cases, in ADEXP messages.
    FieldType10 equipment_and_capabilities = 15;
  }

  // Defines a Abrogation of Co-ordination message.
  message MacMessage {
    // Message Number ICAO - Field type 3b.
    MessageNumber message_number = 1;

    // Aircraft Identification ICAO - Field type 7a.
    tern.protobuf.flight.CallSign aircraft_identification = 2;

    // Departure Aerodrome ICAO - Field type 13.
    FieldType13 departure_aerodrome = 3;

    // Co-ordination Point ICAO - Field type 14a.
    string boundary_point = 4;

    // Destination Aerodrome ICAO - Field type 16.
    FieldType16 destination_aerodrome = 5;

    // Message Reference - Field type 3c.
    MessageNumber message_reference = 6;

    // Co-ordination Status and Reason - Field type 18.
    OldiCoordinationStatusAndReason coordination_status_and_reason = 7;
  }

  // Defines a Logical Acknowledgement message.
  message LamMessage {
    // Message Number ICAO - Field type 3b.
    MessageNumber message_number = 1;

    // Message Reference - Field type 3c.
    MessageNumber message_reference = 2;

    // Departure Aerodrome ICAO - Field type 13.
    FieldType13 departure_aerodrome = 3;
  }

  message RevMessage {
    // Message Number ICAO - Field type 3b.
    MessageNumber message_number = 1;

    // Aircraft ID and Mode-A Code ICAO - Field type 7.
    FieldType7 aircraft_id_mode_a_code = 2;

    // Departure Aerodrome ICAO - Field type 13.
    FieldType13 departure_aerodrome = 3;

    // Estimate data ICAO - Field type 14.
    FieldType14 estimate_data = 4;

    // Co-ordination Point ICAO - Field type 14a.
    CoordinationPoint coordination_point = 5;

    // Destination Aerodrome ICAO - Field type 16.
    FieldType16 destination_aerodrome = 6;

    // Equipment Capability and Status, the equipment which is available for use - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_equipped = 7;

    // Equipment Capability and Status, the equipment which is not present or cannot be used - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_not_equipped = 8;

    // Equipment Capability and Status, when the compliance with the capability is unknown - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_unknown = 9;

    // Cruising Level, Cruising Speed and Route ICAO - Field type 15.
    FieldType15 route = 10;

    // Message Reference - Field type 3c.
    MessageNumber message_reference = 11;

    // Flight Rule Category and Type of Flight, ICAO - Field type 8.
    FieldType8 flight_rules_and_type_of_flight = 12;

    // Other Flight Plan Data - Field type 18 Flight Rules in field type22 - One or more of the following
    // field type 18 elements in field type 22 format: REG, OPR, STS, TYP, PER, DEP, DEST, ALTN, RALT, RMK.
    FieldType18 other_flight_plan_data = 13;

    // Equipment Capability ICAO - Field type 10. Provided, in some cases, in ADEXP messages.
    FieldType10 equipment_and_capabilities = 14;
  }

  message PacMessage {
    // Message Number ICAO - Field type 3b.
    MessageNumber message_number = 1;

    // Aircraft ID and Mode-A Code ICAO - Field type 7.
    FieldType7 aircraft_id_mode_a_code = 2;

    // Departure Aerodrome ICAO - Field type 13.
    FieldType13 departure_aerodrome = 3;

    oneof estimate {
      // Estimate data ICAO - Field type 14.
      FieldType14 estimate_data = 4;

      // Estimated take off time.
      tern.protobuf.TimeOfDay estimated_take_off_time = 5;
    }

    // Destination Aerodrome ICAO - Field type 16.
    FieldType16 destination_aerodrome = 6;

    // Number and Type of Aircraft - Field type 9 in field 22 format.
    FieldType9 number_and_type_of_aircraft = 7;

    // the type of flight - Send from a TMA control unit or an ACC - Field type 8b in field 22 format.
    tern.protobuf.flight.TypeOfFlight type_of_flight = 8 [deprecated = true];

    // Equipment Capability and Status, the equipment which is available for use - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_equipped = 9;

    // Equipment Capability and Status, the equipment which is not present or cannot be used - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_not_equipped = 10;

    // Equipment Capability and Status, when the compliance with the capability is unknown - Field type 81 in Field Type 22 format.
    tern.protobuf.flight.CommunicationAndNavigationCapabilities equipment_capability_and_status_unknown = 11;

    // Cruising Level, Cruising Speed and Route ICAO - Field type 15.
    FieldType15 route = 12;

    // Other Flight Plan Data - Field type 18 Flight Rules in field type22 - One or more of the following
    // field type 18 elements in field type 22 format: REG, OPR, STS, TYP, PER, DEP, DEST, ALTN, RALT, RMK.
    FieldType18 other_flight_plan_data = 13;

    // Message Reference - Field type 3c.
    MessageNumber message_reference = 14;

    // Departure Runway ICAO - Field type 22.
    DepartureRunway departure_runway = 15;

    // Sid Identifier.
    SidIdentifier sid_identifier = 16;

    // Cleared flight level.
    tern.protobuf.flight.PlannedCruisingLevel cleared_flight_level = 17;

    // Equipment Capability ICAO - Field type 10. Provided, in some cases, in ADEXP messages.
    FieldType10 equipment_and_capabilities = 18;

    // Flight Rule Category and Type of Flight, ICAO - Field type 8.
    FieldType8 flight_rules_and_type_of_flight = 19;
  }

  message BfdMessage {
    // Following fields have been deleted and should not be re-used.
    reserved 5;
    reserved "departure_aerodrome";

    // Message Number - ICAO Field type 3b.
    MessageNumber message_number = 1;

    // Aircraft ID and Mode-A Code ICAO - Field type 7.
    FieldType7 aircraft_id_mode_a_code = 2;

    // Flight Rule Category and Type of Flight - ICAO Field type 8a and optionally, Field type 8b in Field type 22 format.
    FieldType8 flight_rules_type_of_flight = 3;

    // Number and Type of Aircraft - ICAO Field type 9.
    FieldType9 number_and_type_of_aircraft = 4;

    // Cruising Level, Cruising Speed and Route - ICAO Field type 15.
    FieldType15 route = 6;

    // Destination Aerodrome - ICAO Field type 16.
    FieldType16 destination_aerodrome = 7;

    // Other Flight Plan Data - ICAO Field type 18 elements in Field type 22 format.
    // (REG, OPR, STS, TYP, PER, DEP, DEST, ALTN, RALT, RMK)
    FieldType18 other_flight_plan_data = 8;

    // Equipment Capability and Status - Field type 81 in Field Type 22 format.
    OldiEquipmentCapabilityAndStatus equipment_capability_and_status = 9;

    // Route Points (RTEPTS).
    repeated RoutePoint route_points = 10;

    // Requested flight level (RFL).
    tern.protobuf.flight.PlannedCruisingLevel requested_flight_level = 11;

    // Requested cruising speed (SPEED).
    tern.protobuf.flight.PlannedCruisingSpeed requested_cruising_speed = 12;

    // Cleared flight level (CFL).
    tern.protobuf.flight.PlannedCruisingLevel cleared_flight_level = 13;

    // Sector Identifier of the position having control of the flight (SECTOR - OLDI 4.2 appendix A.33)
    string sector_id = 14;

    // Previous SSR Mode and Code (PREVSSRCODE - OLDI 4.2 appendix A.40)
    tern.protobuf.flight.ModeACode previous_ssr_code = 15;

    // Next SSR Mode and Code (NEXTSSRCODE - OLDI 4.2 appendix A.41)
    tern.protobuf.flight.ModeACode next_ssr_code = 16;

    // Equipment Capability ICAO - Field type 10. Provided, in some cases, in ADEXP messages.
    FieldType10 equipment_and_capabilities = 17;

    // Filing Time (FILTIM)
    google.protobuf.Timestamp filing_time = 18;

    // Departure Aerodrome (ADEP)
    AerodromeDesignator departure_aerodrome_designator = 19;

    // Departure Information (DEPZ)
    string departure_information = 20;

    // Estimated Off-Block Time (EOBT)
    tern.protobuf.TimeOfDay estimated_off_block_time = 21;
  }

  message CfdMessage {
    // Message Number - ICAO Field type 3b.
    MessageNumber message_number = 1;

    // Message Reference - ICAO Field type 3c.
    MessageNumber message_reference = 2;

    // Aircraft ID and Mode-A Code ICAO - Field type 7.
    FieldType7 aircraft_id_mode_a_code = 3;

    // Flight Rule Category and Type of Flight - ICAO Field type 8a and optionally, Field type 7b in Field type 22 format.
    FieldType8 flight_rules_type_of_flight = 4;

    // Number and Type of Aircraft - ICAO Field type 9.
    FieldType9 number_and_type_of_aircraft = 5;

    // Departure Aerodrome - ICAO Field type 13.
    FieldType13 departure_aerodrome = 6;

    // Cruising Level, Cruising Speed and Route - ICAO Field type 15.
    FieldType15 route = 7;

    // Destination Aerodrome - ICAO Field type 16.
    FieldType16 destination_aerodrome = 8;

    // Other Flight Plan Data - ICAO Field type 18 elements in Field type 22 format.
    // (REG, OPR, STS, TYP, PER, DEP, DEST, ALTN, RALT, RMK)
    FieldType18 other_flight_plan_data = 9;

    // Equipment Capability and Status - Field type 81 in Field Type 22 format.
    OldiEquipmentCapabilityAndStatus equipment_capability_and_status = 10;

    // Route Points (RTEPTS).
    repeated RoutePoint route_points = 11;

    // Requested flight level (RFL).
    tern.protobuf.flight.PlannedCruisingLevel requested_flight_level = 12;

    // Requested cruising speed (SPEED).
    tern.protobuf.flight.PlannedCruisingSpeed requested_cruising_speed = 13;

    // Cleared flight level (CFL).
    tern.protobuf.flight.PlannedCruisingLevel cleared_flight_level = 14;

    // Sector Identifier of the position having control of the flight (SECTOR - OLDI 4.2 appendix A.33)
    string sector_id = 15;

    // Previous SSR Mode and Code (PREVSSRCODE - OLDI 4.2 appendix A.40)
    tern.protobuf.flight.ModeACode previous_ssr_code = 16;

    // Next SSR Mode and Code (NEXTSSRCODE - OLDI 4.2 appendix A.41)
    tern.protobuf.flight.ModeACode next_ssr_code = 17;

    // Assigned Heading/Track or Direct Clearance (AHEAD - OLDI 4.2 appendix A.17)
    string assigned_heading = 18;

    // Assigned Speed (ASPEED - OLDI 4.2 appendix A.18)
    string assigned_speed = 19;

    // Assigned Rate of Climb/Descent (RATE - OLDI 4.2 appendix A.19)
    string assigned_rate_of_climb = 20;

    // Release Indication (RELEASE - OLDI 4.2 appendix A.24)
    string release_indication = 21;

    // Equipment Capability ICAO - Field type 10. Provided, in some cases, in ADEXP messages.
    FieldType10 equipment_and_capabilities = 22;

    // Filing Time (FILTIM)
    google.protobuf.Timestamp filing_time = 23;

    // Flight Status (FPLSTAT)
    OldiFlightStatus flight_status = 24;
  }

  oneof message {
    AbiMessage abi_message = 1;
    ActMessage act_message = 2;
    LamMessage lam_message = 3;
    MacMessage mac_message = 4;
    RevMessage rev_message = 5;
    PacMessage pac_message = 6;
    BfdMessage bfd_message = 7;
    CfdMessage cfd_message = 8;
  }
}

// The FlightMessageVariant message defines the message types that can be ATS flight message, supported
// by Polaris FDP.
message FlightMessageVariant {

  oneof message {
    AchMessage ach_message = 1;
    AfpMessage afp_message = 2;
    AplMessage apl_message = 3;
    ArrMessage arr_message = 4;
    ChgMessage chg_message = 5;
    CnlMessage cnl_message = 6;
    CplMessage cpl_message = 7;
    DepMessage dep_message = 8;
    DlaMessage dla_message = 9;
    FplMessage fpl_message = 10;
    RqpMessage rqp_message = 11;
    RqsMessage rqs_message = 12;
    SplMessage spl_message = 13;
    OldiMessage.AbiMessage oldi_abi_message = 14;
    OldiMessage.ActMessage oldi_act_message = 15;
    OldiMessage.MacMessage oldi_mac_message = 16;
    OldiMessage.LamMessage oldi_lam_message = 17;
    OldiMessage.RevMessage oldi_rev_message = 18;
    OldiMessage.PacMessage oldi_pac_message = 19;
    OldiMessage.BfdMessage oldi_bfd_message = 20;
    OldiMessage.CfdMessage oldi_cfd_message = 21;
    SamMessage sam_message = 22;
    SlcMessage slc_message = 23;
    SrmMessage srm_message = 24;
    AcpMessage aidc_acp_message = 25;
    LamMessage aidc_lam_message = 26;
    LrmMessage aidc_lrm_message = 27;
  }
}

// The SfrAssociationkey message contains necessary information to associate the message with an existing SFR.
message SfrAssociationKey {

  // Aircraft Identification ICAO - Field type 7a.
  tern.protobuf.flight.CallSign aircraft_identification = 1;

  // Departure Aerodrome ICAO - Field type 13.
  FieldType13 departure_aerodrome = 2;

  // Destination Aerodrome ICAO - Field type 16.
  FieldType16 destination_aerodrome = 3;

  // DOF/   - The date of flight departure in a six-figure format (YYMMDD).
  google.protobuf.Timestamp date_of_flight = 4;

  // Unique Flight Plan Identifier - ADEXP 'IFPLID' field.
  UniqueFlightPlanIdentifier unique_flight_plan_id = 5;
}

// The FlightMessageValidationFailure message defines the validation failure details of the flight message in case of validation failure.
message FlightMessageValidationFailure {
  // The field position in the original message.
  message FieldIndex {
    int32 start_position = 1;
    int32 end_position = 2;
  }
  // The validation failure offending field details.
  message MessageValidationFailureDetails {
    // The field name of the offending field if any.
    string field_name = 1;
    // The start and end position of the offending field if any.
    FieldIndex field_index = 2;
    // The field value of the offending field if any.
    string field_value = 4;
    // The field validation failure description.
    string description = 5[ deprecated = true ];
    // The validation failure type.
    ValidationErrorType validation_error_type = 6;
    // The validation failure error code.
    ValidationErrorCode validation_error_code = 7;
    // The validation failure error description.
    string validation_error_description = 8 ;
  }
  // The validation failure type.
  ValidationErrorType validation_error_type = 1[ deprecated = true ];
  // The validation failure error code.
  ValidationErrorCode validation_error_code = 2[ deprecated = true ];
  // The validation failure error description.
  string validation_error_description = 3[ deprecated = true ];
  // The validation failure details.
  repeated MessageValidationFailureDetails message_validation_failure_details = 4;
  // The validation failure acknowledged status, indicating if the message has been applied/acknowledged by the end user.
  bool message_validation_failure_acknowledged = 5;
}

// The generalized message comprising of all ATS messages supported by the Polaris FDP.
message FlightMessage {

  // Defines a unique id for the message.
  tern.protobuf.Uuid message_id = 1;

  // The information of the transporting protocol. Used to originate the message.
  AftnHeader aftn_header = 2;

  // The actual message.
  FlightMessageVariant message = 3;

  // The text representation of the message.
  // For incoming messages this would facilitate a manual repair when an automatic processing fails.
  string original_message = 4;

  // Text representation of the message body, as received or generated by the FDP.
  string body = 5;

  // Result of semantic validation on incoming message.
  // True on semantic validation failure.
  bool semantic_validation_failure = 6 [ deprecated = true ];

  // Text representation of semantic validation failure on incoming message.
  string semantic_validation_failure_reason = 7 [deprecated = true];

  // Key fields for SFR association.
  SfrAssociationKey sfr_association_key = 8;

  // Validation failure details.
  FlightMessageValidationFailure validation_failure = 9;
}
